{
  "info": {
    "_postman_id": "55d558cf-bf54-4050-b166-48221bb2a8ba",
    "name": "Alumni",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25439189"
  },
  "item": [
    {
      "name": "Clear db Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Validate the success field is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "pm.test('Tables have been cleared in the database', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.true;",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}api/admin/clear_tables",
          "host": ["{{baseUrl}}api"],
          "path": ["admin", "clear_tables"]
        }
      },
      "response": []
    },
    {
      "name": "Register Alumni",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 201\", function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData).to.have.property('success');",
              "  pm.expect(responseData).to.have.property('message');",
              "  pm.expect(responseData).to.have.property('user');",
              "});",
              "",
              "",
              "pm.test(\"User ID is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.user.User_Id).to.be.a('number').and.to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"Email is in a valid format\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.user.Email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
              "});",
              "",
              "",
              "pm.test(\"Date of Birth is in a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.user.Date_Of_Birth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
              "});",
              "",
              "",
              "",
              "pm.test(\"Response status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Validate the success field is true\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Message is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "demo-code",
            "value": "demo2023",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"UserName\": \"Mazin\",\r\n  \"Password\": \"Mazin123##\",\r\n  \"Email\": \"mazinislam431@gmail.com\",\r\n  \"Role_Id\": 1,\r\n  \"Date_Of_Birth\": \"1990-01-01\",\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Doe\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/register",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "register"]
        },
        "description": "- Alumni : 1\n    \n- Student: 3\n    \n- HR: 4"
      },
      "response": [
        {
          "name": "Register Alumni",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"UserName\": \"johndoe\",\r\n  \"Password\": \"password123\",\r\n  \"Email\": \"johndoe@example.com\",\r\n  \"Role_Id\": 1,\r\n  \"National_Id\": \"1234567890\",\r\n  \"Academic_Id\": \"123456\",\r\n  \"Date_Of_Birth\": \"1990-01-01\",\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Doe\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}api/auth/register",
              "host": ["{{baseUrl}}api"],
              "path": ["auth", "register"]
            }
          },
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "name": "Content-Type",
              "description": "",
              "type": "text"
            }
          ],
          "cookie": [],
          "body": "{\r\n    \"success\": true,\r\n    \"message\": \"User created successfully.\",\r\n    \"user\": {\r\n        \"User_Id\": 1,\r\n        \"UserName\": \"johndoe\",\r\n        \"Email\": \"johndoe@example.com\",\r\n        \"Role_Id\": 1,\r\n        \"Date_Of_Birth\": \"1990-01-01\",\r\n        \"FirstName\": \"John\",\r\n        \"LastName\": \"Doe\",\r\n        \"updatedAt\": \"2023-09-30T11:17:37.586Z\",\r\n        \"createdAt\": \"2023-09-30T11:17:37.586Z\"\r\n    }\r\n}"
        }
      ]
    },
    {
      "name": "Register Student",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 201\", function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData).to.have.property('success');",
              "  pm.expect(responseData).to.have.property('message');",
              "  pm.expect(responseData).to.have.property('user');",
              "});",
              "",
              "",
              "pm.test(\"User ID is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.user.User_Id).to.be.a('number').and.to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"Email is in a valid format\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.user.Email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
              "});",
              "",
              "",
              "pm.test(\"Date of Birth is in a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.user.Date_Of_Birth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
              "});",
              "",
              "",
              "",
              "pm.test(\"Response status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Validate the success field is true\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Message is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"UserName\": \"Student\",\r\n  \"Password\": \"Student123##\",\r\n  \"Email\": \"studentislam431@gmail.com\",\r\n  \"Role_Id\": 3,\r\n  \"Date_Of_Birth\": \"1990-01-01\",\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Doe\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/register",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "register"]
        },
        "description": "- Alumni : 1\n    \n- Student: 3\n    \n- HR: 4"
      },
      "response": [
        {
          "name": "Register Alumni",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"UserName\": \"johndoe\",\r\n  \"Password\": \"password123\",\r\n  \"Email\": \"johndoe@example.com\",\r\n  \"Role_Id\": 1,\r\n  \"National_Id\": \"1234567890\",\r\n  \"Academic_Id\": \"123456\",\r\n  \"Date_Of_Birth\": \"1990-01-01\",\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Doe\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}api/auth/register",
              "host": ["{{baseUrl}}api"],
              "path": ["auth", "register"]
            }
          },
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "name": "Content-Type",
              "description": "",
              "type": "text"
            }
          ],
          "cookie": [],
          "body": "{\r\n    \"success\": true,\r\n    \"message\": \"User created successfully.\",\r\n    \"user\": {\r\n        \"User_Id\": 1,\r\n        \"UserName\": \"johndoe\",\r\n        \"Email\": \"johndoe@example.com\",\r\n        \"Role_Id\": 1,\r\n        \"Date_Of_Birth\": \"1990-01-01\",\r\n        \"FirstName\": \"John\",\r\n        \"LastName\": \"Doe\",\r\n        \"updatedAt\": \"2023-09-30T11:17:37.586Z\",\r\n        \"createdAt\": \"2023-09-30T11:17:37.586Z\"\r\n    }\r\n}"
        }
      ]
    },
    {
      "name": "Register HR",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 201\", function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData).to.have.property('success');",
              "  pm.expect(responseData).to.have.property('message');",
              "  pm.expect(responseData).to.have.property('user');",
              "});",
              "",
              "",
              "pm.test(\"User ID is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.user.User_Id).to.be.a('number').and.to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"Email is in a valid format\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.user.Email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
              "});",
              "",
              "",
              "pm.test(\"Date of Birth is in a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.user.Date_Of_Birth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
              "});",
              "",
              "",
              "",
              "pm.test(\"Response status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Validate the success field is true\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Message is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"UserName\": \"hrr\",\r\n  \"Password\": \"hr123##\",\r\n  \"Email\": \"hr@hr.com\",\r\n  \"Role_Id\": 4,\r\n  \"Date_Of_Birth\": \"1990-01-01\",\r\n  \"FirstName\": \"hrr\",\r\n  \"LastName\": \"hrr\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/register",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "register"]
        },
        "description": "- Alumni : 1\n    \n- Student: 3\n    \n- HR: 4"
      },
      "response": [
        {
          "name": "Register Alumni",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"UserName\": \"johndoe\",\r\n  \"Password\": \"password123\",\r\n  \"Email\": \"johndoe@example.com\",\r\n  \"Role_Id\": 1,\r\n  \"National_Id\": \"1234567890\",\r\n  \"Academic_Id\": \"123456\",\r\n  \"Date_Of_Birth\": \"1990-01-01\",\r\n  \"FirstName\": \"John\",\r\n  \"LastName\": \"Doe\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}api/auth/register",
              "host": ["{{baseUrl}}api"],
              "path": ["auth", "register"]
            }
          },
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "name": "Content-Type",
              "description": "",
              "type": "text"
            }
          ],
          "cookie": [],
          "body": "{\r\n    \"success\": true,\r\n    \"message\": \"User created successfully.\",\r\n    \"user\": {\r\n        \"User_Id\": 1,\r\n        \"UserName\": \"johndoe\",\r\n        \"Email\": \"johndoe@example.com\",\r\n        \"Role_Id\": 1,\r\n        \"Date_Of_Birth\": \"1990-01-01\",\r\n        \"FirstName\": \"John\",\r\n        \"LastName\": \"Doe\",\r\n        \"updatedAt\": \"2023-09-30T11:17:37.586Z\",\r\n        \"createdAt\": \"2023-09-30T11:17:37.586Z\"\r\n    }\r\n}"
        }
      ]
    },
    {
      "name": "Alumni Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Alumni logged in successfully\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "    pm.expect(jsonData.success).to.equal(true)\r",
              "    pm.expect(jsonData.actor).to.equal(\"Alumni\")\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Mazin",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Mazin123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text",
              "disabled": true
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text",
              "disabled": true
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Alumni",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "})",
              "",
              "pm.test('Validate the success field is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "pm.test('Email is in a valid format', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.alumni.Email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
              "})",
              "",
              "pm.test('User_Id is a non-negative integer', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.alumni.User_Id).to.exist.and.to.be.a('number');",
              "    pm.expect(responseData.alumni.User_Id).to.be.at.least(0, 'User_Id should be a non-negative integer');",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/get_alumni",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "get_alumni"]
        }
      },
      "response": []
    },
    {
      "name": "Get Full User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "})",
              "",
              "pm.test('Validate the success field is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "pm.test('Email is in a valid format', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.user.Email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
              "})",
              "",
              "pm.test('User_Id is a non-negative integer', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.user.User_Id).to.exist.and.to.be.a('number');",
              "    pm.expect(responseData.user.User_Id).to.be.at.least(0, 'User_Id should be a non-negative integer');",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/",
          "host": ["{{baseUrl}}api"],
          "path": ["users", ""]
        }
      },
      "response": []
    },
    {
      "name": "Add Role",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has a 'success' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Role_Name",
              "value": "Alumni",
              "type": "text"
            },
            {
              "key": "Role_Description",
              "value": "A graduated student",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/roles/addRole",
          "host": ["{{baseUrl}}api"],
          "path": ["roles", "addRole"]
        }
      },
      "response": []
    },
    {
      "name": "Check Email",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the success field in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'message' field in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"Verify that the response is in JSON format\", function () {",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Email",
              "value": "mazinislam431@gmail.com",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/check_email",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "check_email"]
        }
      },
      "response": []
    },
    {
      "name": "Check Academic id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response and has a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is present and is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Academic_Id",
              "value": "11",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/check_academic_id",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "check_academic_id"]
        }
      },
      "response": []
    },
    {
      "name": "Check User Name",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response and has a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is present and is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Mazin",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/check_user_name",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "check_user_name"]
        }
      },
      "response": []
    },
    {
      "name": "Is Logged In",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Success field is present and set to true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.true;",
              "})",
              "",
              "pm.test('Actor field is present and not empty', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.actor).to.exist.and.to.be.not.empty;",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/auth/status",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "status"]
        }
      },
      "response": []
    },
    {
      "name": "Login Student",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Student",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Student123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Student",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'success' field in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'student' object in the response\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.student).to.exist.and.to.be.an('object');",
              "});",
              "",
              "",
              "pm.test(\"User_Id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.student.User_Id).to.be.a('number');",
              "    pm.expect(responseData.student.User_Id).to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"UserName is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.student.UserName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/get_student",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "get_student"]
        }
      },
      "response": []
    },
    {
      "name": "Add skill",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 201\", function () {",
              "  pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"The success field is a boolean value\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"The message field is a non-empty string\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 500ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Skill_Name",
              "value": "Front-End",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/skills/",
          "host": ["{{baseUrl}}api"],
          "path": ["skills", ""]
        }
      },
      "response": []
    },
    {
      "name": "Get All skills",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'success' field is true\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'skills' array is present and contains at least one element\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.skills).to.exist.and.to.be.an('array').that.is.not.empty;",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 200ms\", function () {",
              "  pm.expect(pm.response.responseTime).to.be.below(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/skills/",
          "host": ["{{baseUrl}}api"],
          "path": ["skills", ""]
        }
      },
      "response": []
    },
    {
      "name": "Add skill to user",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 201\", function () {",
              "  pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields - success and message\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist;",
              "  pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Success field is a boolean value\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 500ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Skill_Id",
              "value": "1",
              "type": "text"
            },
            {
              "key": "Rate",
              "value": "5",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/user_skills/",
          "host": ["{{baseUrl}}api"],
          "path": ["user_skills", ""]
        }
      },
      "response": []
    },
    {
      "name": "Get User Skills",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate success field is true\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'user_skills' array is present and contains at least one element\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.user_skills).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
              "});",
              "",
              "",
              "pm.test(\"User_Skill_Id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    responseData.user_skills.forEach(function (user_skill) {",
              "        pm.expect(user_skill.User_Skill_Id).to.be.a('number').and.to.be.at.least(0, \"User_Skill_Id should be a non-negative integer\");",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/user_skills/",
          "host": ["{{baseUrl}}api"],
          "path": ["user_skills", ""]
        }
      },
      "response": []
    },
    {
      "name": "Student Logout",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Success property is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "",
              "pm.test('Response does not contain any additional properties', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(Object.keys(responseData)).to.have.lengthOf(2);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/auth/logout",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "logout"]
        }
      },
      "response": []
    },
    {
      "name": "Login HR",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "hrr",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "hr123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get HR",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'success' field in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'student' object in the response\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.hr).to.exist.and.to.be.an('object');",
              "});",
              "",
              "",
              "pm.test(\"User_Id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.hr.User_Id).to.be.a('number');",
              "    pm.expect(responseData.hr.User_Id).to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"UserName is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.hr.UserName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/get_hr",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "get_hr"]
        }
      },
      "response": []
    },
    {
      "name": "Add Job Category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Job_Category_Id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.Job_Category_Id).to.be.a('number');",
              "    pm.expect(responseData.Job_Category_Id).to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"Job_Category_Name is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.Job_Category_Name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job_Category_Name should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"updatedAt is a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
              "});",
              "",
              "",
              "pm.test(\"createdAt is a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"createdAt should be a valid date format\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Job_Category_Name",
              "value": "Full Stack Developer",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/add-job-category",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "add-job-category"]
        }
      },
      "response": []
    },
    {
      "name": "Get All job categories",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response is an array with at least one element\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 200ms\", function () {",
              "  pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/jobs/get-job-categories",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "get-job-categories"]
        }
      },
      "response": []
    },
    {
      "name": "Add Job Post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Job_Id is a non-zero positive integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.job_post_created.Job_Id).to.be.a('number');",
              "    pm.expect(responseData.job_post_created.Job_Id).to.be.above(0);",
              "});",
              "",
              "",
              "pm.test(\"Job_Title is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.job_post_created).to.exist;",
              "    pm.expect(responseData.job_post_created.Job_Title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Company_Name is a non-empty string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.job_post_created).to.exist.and.to.be.an('object');",
              "  pm.expect(responseData.job_post_created.Company_Name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Company_Name should not be empty\");",
              "});",
              "",
              "",
              "",
              "",
              "",
              "pm.test(\"Validate the 'createdSkills' array in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.createdSkills).to.exist.and.to.be.an('array');",
              "    pm.expect(responseData.createdSkills).to.have.lengthOf(1);",
              "});",
              "",
              "",
              "pm.test(\"Publisher_Id is a non-null value\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.job_post_created.Publisher_Id).to.exist.and.to.not.be.null;",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"Job_Title\": \"Full Stack Developer\",\r\n    \"Description\": \"We are looking for a Full Stack Developer to join our team!\",\r\n    \"Company_Name\": \"Acme Inc.\",\r\n    \"Company_Logo\": \"https://example.com/logo.png\",\r\n    \"Company_Size\": \"100-500 employees\",\r\n    \"Contact_Info\": \"John Doe\",\r\n    \"Company_Email\": \"jobs@acme.com\",\r\n    \"External_Link\": \"https://acme.com/careers\",\r\n    \"Location\": \"New York, NY\",\r\n    \"Application_Deadline\": \"2023-12-31\",\r\n    \"Job_Category_Id\": 1,\r\n    \"Salary\": 5000,\r\n    \"Publisher_Id\": 1,\r\n    \"isInternship\": false,\r\n    \"Duration\": null,\r\n    \"Job_Type\": \"onsite\", // 'remote', 'onsite', 'hybrid'\r\n    \"Education_Level\": \"graduate\", // 'undergraduate', 'graduate', 'both'\r\n    \"Job_Skills\": [1],\r\n    \"Job_Requirements\": \"test\",\r\n    \"Job_Time\": \"Full-time\",\r\n    \"notification\":false\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/add-job-post",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "add-job-post"]
        }
      },
      "response": []
    },
    {
      "name": "Get job post by id",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/jobs/get-job-post/1",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "get-job-post", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Get job posts",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response is an array with at least one element\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('array');",
              "    pm.expect(responseData).to.have.lengthOf.at.least(1);",
              "});",
              "",
              "",
              "pm.test(\"Job title is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function (job) {",
              "        pm.expect(job.Job_Title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job title should not be empty\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Company name is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function(job) {",
              "        pm.expect(job.Company_Name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Company name should not be empty\");",
              "    });",
              "});",
              "",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
              "",
              "    responseData.forEach(function (job) {",
              "        pm.expect(job.Job_Id).to.exist.and.to.be.a('number');",
              "        pm.expect(job.Description).to.exist.and.to.be.a('string');",
              "        pm.expect(job.Location).to.exist.and.to.be.a('string');",
              "        pm.expect(job.Application_Deadline).to.exist.and.to.be.a('string');",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Job_Id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array');",
              "    ",
              "    responseData.forEach(function(job) {",
              "        pm.expect(job.Job_Id).to.be.a('number');",
              "        pm.expect(job.Job_Id).to.be.at.least(0, \"Job_Id should be a non-negative integer\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Description is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function(job) {",
              "        pm.expect(job.Description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Company_Logo is a URL\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    responseData.forEach(function (job) {",
              "        pm.expect(job.Company_Logo).to.be.a('string').and.to.match(/^http(s)?:\\/\\/\\S+/);",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Company_Size is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function(job) {",
              "        pm.expect(job.Company_Size).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "    });",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/jobs/get-job-posts?page=0&limit=5",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "get-job-posts"],
          "query": [
            {
              "key": "page",
              "value": "0"
            },
            {
              "key": "limit",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login Student Copy 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Student",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Student123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Apply to job",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Application_Id is a non-zero integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.Application_Id).to.exist.and.to.be.a('number');",
              "    pm.expect(responseData.Application_Id).to.be.above(0);",
              "});",
              "",
              "",
              "pm.test(\"Job_Id is a non-empty string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.Job_Id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Applicant_Id is a non-zero integer\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.Applicant_Id).to.exist.and.to.be.a('number').and.to.be.above(0);",
              "});",
              "",
              "",
              "",
              "pm.test(\"Status is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.Status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Cover_Letter is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.Cover_Letter).to.be.a('string').and.to.have.length.above(0, \"Cover_Letter should be a non-empty string\");",
              "});",
              "",
              "",
              "pm.test(\"Resume is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.Resume).to.be.a('string').and.not.empty;",
              "});",
              "",
              "",
              "pm.test(\"updatedAt is a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.updatedAt).to.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z$/, \"updatedAt should be in valid date format\");",
              "});",
              "",
              "",
              "",
              "pm.test(\"Response has the required field - Application_Date\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.Application_Date).to.exist.and.to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"Application_Date is in a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.Application_Date).to.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z$/, \"Application_Date be in valid date format\");",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 200ms\", function () {",
              "  pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate that the 'Status' is one of the expected values\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.Status).to.exist.and.to.be.oneOf([\"Pending\", \"Approved\", \"Rejected\"]);",
              "});",
              "",
              "",
              "pm.test(\"Job_Id is a non-empty string and matches the expected pattern\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.Job_Id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "    pm.expect(responseData.Job_Id).to.match(/^[\\w-]+$/,\"Value should match the expected pattern\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Job_Id",
              "value": "1",
              "type": "text"
            },
            {
              "key": "Resume",
              "value": "https://res.cloudinary.com/do6oz83pz/image/upload/v1694956973/cvs/dnlwr0md4swty3fksso8.pdf",
              "type": "text"
            },
            {
              "key": "Cover_Letter",
              "value": "Ralph Perez\n505-777-8842\nralphperez@email.com\n\nMarch 1, 2023\n\nDear Hiring Manager,\n\nI am writing to apply for the Associate Software Engineer position with Up and Yonder Technologies. As an engineer with more than 10 years of experience with coding and project development, I believe I can add value to your team and help your organization accomplish its goals. I've always been interested in the development of middleware software platforms and would love to contribute to your current beta project for the construction of Up and Yonder's H20 Middleware Platform.\n\nAs an undergraduate at Blue Lake University, I gained cyber security and software development experience through my computer science internship with renowned computer scientists from Blue Lake. I've also developed and released several of my own programs, including the Giggawhat Design Suite and Lightdrawn Navigation for mobile.\n\nMy excellent attention to detail and quest for perfection allow me to produce quality code that requires less debugging. I pair excellent technical knowledge with collaboration and communication to ensure I support my team members while producing high-quality work.\n\nDuring my time working with Smith & Rodriguez Technology Services and Products, I helped implement a new software review system that improved efficiency by 55% for the team. I also received positive feedback for my ability to both understand software and communicate its uses to potential customers and partners. As a lead software engineer with Smith & Rodriguez, I managed a small team of coding professionals and finished more than 50 software development projects over the course of the year.\n\nI'm grateful that you've taken the time to consider me for the position. Please contact me if you have questions or want to discuss my candidacy further. I'm positive I can help Up & Yonder Technologies strive for greatness.\n\nSincerely,\n\nRalph Perez",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/add-job-application",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "add-job-application"]
        }
      },
      "response": []
    },
    {
      "name": "Get user Applications",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"The response is an array\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/user-job-applications",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "user-job-applications"]
        }
      },
      "response": []
    },
    {
      "name": "Login HR Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "hrr",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "hr123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update Job application status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response is an array\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('array');",
              "});",
              "",
              "",
              "pm.test(\"Array contains at least one element\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
              "});",
              "",
              "",
              "pm.test(\"Array element is a number\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData[0]).to.be.a('number');",
              "});",
              "",
              "",
              "pm.test(\"Array element is equal to 0\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData[0]).to.equal(1);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Job_Application_Id",
              "value": "1",
              "type": "text"
            },
            {
              "key": "Status",
              "value": "Accepted",
              "description": "'Pending', 'Accepted', 'Rejected'",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/update-job-application-status",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "update-job-application-status"]
        }
      },
      "response": []
    },
    {
      "name": "Get Applications For a job",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response is an array with at least one element\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array');",
              "    pm.expect(responseData).to.have.lengthOf.at.least(1);",
              "});",
              "",
              "",
              "pm.test(\"Verify that the user object is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function(application) {",
              "        pm.expect(application.user).to.exist.and.to.be.an('object');",
              "    });",
              "});",
              "",
              "",
              "",
              "pm.test(\"Application_Id, Job_Id, and Applicant_Id are non-zero integers\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData).to.be.an('array');",
              "  ",
              "  responseData.forEach(function(item) {",
              "    pm.expect(item.Application_Id).to.be.a('number').and.to.be.above(0);",
              "    pm.expect(item.Job_Id).to.be.a('number').and.to.be.above(0);",
              "    pm.expect(item.Applicant_Id).to.be.a('number').and.to.be.above(0);",
              "  });",
              "});",
              "",
              "pm.test(\"Cover_Letter and Resume are non-empty strings\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
              "    ",
              "    responseData.forEach(function(application) {",
              "        pm.expect(application.Cover_Letter).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Cover Letter should not be empty\");",
              "        pm.expect(application.Resume).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Resume should not be empty\");",
              "    });",
              "});",
              "",
              "pm.test(\"Status is a non-empty string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('array');",
              "  responseData.forEach(function(application) {",
              "    pm.expect(application.Status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "  });",
              "});",
              "",
              "",
              "pm.test(\"Application_Date and updatedAt are in a valid date format\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('array');",
              "    responseData.forEach(function(application) {",
              "        pm.expect(application.Application_Date).to.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z$/, \"Application_Date should be in valid date format\");",
              "        pm.expect(application.updatedAt).to.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z$/, \"updatedAt should be in valid date format\");",
              "    });",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/job-applications/1",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "job-applications", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Delete post",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"The response should be a string\", function () {",
              "    pm.expect(pm.response.text()).to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"Verify that the response is 1\", function () {",
              "    pm.expect(pm.response.text()).to.equal(\"1\");",
              "});",
              "",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/delete-job-post/1",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "delete-job-post", "1"]
        }
      },
      "response": []
    },
    {
      "name": "HR Logout",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Success property is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "",
              "pm.test('Response does not contain any additional properties', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(Object.keys(responseData)).to.have.lengthOf(2);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/auth/logout",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "logout"]
        }
      },
      "response": []
    },
    {
      "name": "Login Student Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Student",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Student123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Upload Picture",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "\r",
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"The success field should be true\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData.success).to.be.true;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"The Img field should not be empty\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData.Img).to.exist.and.to.not.be.empty;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Img field is a valid URL\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData.Img).to.be.a('string');\r",
              "    pm.expect(responseData.Img).to.match(/^http[s]?:\\/\\/\\S+/);\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"pictureUrl\" : \"https://res.cloudinary.com/do6oz83pz/image/upload/v1696427720/images/357750713_6222313764534213_4994894433967516616_n_hp84md.jpg\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}api/users/upload_picture",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "upload_picture"]
        }
      },
      "response": []
    },
    {
      "name": "Upload CV",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "\r",
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Success field is true\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.success).to.be.true;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"CV field is not empty\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData.CV).to.exist.and.to.not.be.empty;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"CV field is a valid URL\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "\r",
              "    pm.expect(responseData).to.be.an('object');\r",
              "    pm.expect(responseData.CV).to.exist.and.to.match(/^http(s)?:\\/\\/\\w+(\\.\\w+)*(:[0-9]+)?\\/?.*$/, \"CV field should be a valid URL\");\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"cvUrl\": \"https://res.cloudinary.com/do6oz83pz/image/upload/v1693490945/cvs/hpa0dw2oymfefjol6n6i.pdf\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}api/users/upload_cv",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "upload_cv"]
        }
      },
      "response": []
    },
    {
      "name": "Update phone",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    pm.expect(pm.response.json().success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.have.property('message');",
              "});",
              "",
              "",
              "pm.test(\"Message field is a string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Phone",
              "value": "01033444388",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/update_phone",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "update_phone"]
        }
      },
      "response": []
    },
    {
      "name": "Update Name",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    pm.expect(pm.response.json().success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.have.property('message');",
              "});",
              "",
              "",
              "pm.test(\"Message field is a string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "FirstName",
              "value": "Mazin",
              "type": "text"
            },
            {
              "key": "LastName",
              "value": "Islam",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/update_name",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "update_name"]
        }
      },
      "response": []
    },
    {
      "name": "Update About",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has required fields - success and message\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"Test that success field is a boolean\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"The message field should be a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "About",
              "value": "long about text",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/update_about",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "update_about"]
        }
      },
      "response": []
    },
    {
      "name": "Update Country",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has 'success' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Check if 'success' field is a boolean\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'message' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.have.property(\"message\");",
              "});",
              "",
              "",
              "pm.test(\"The 'message' field is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Country",
              "value": "Egypt",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/update_country",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "update_country"]
        }
      },
      "response": []
    },
    {
      "name": "Update Position",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has 'success' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Check if 'success' field is a boolean\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'message' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.have.property(\"message\");",
              "});",
              "",
              "",
              "pm.test(\"The 'message' field is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Job_Title",
              "value": "Full Stack Developer",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/update_position",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "update_position"]
        }
      },
      "response": []
    },
    {
      "name": "Update Social Urls",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field has a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"The message field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Message field is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Behance_URL",
              "value": "fsdfsdf",
              "type": "text"
            },
            {
              "key": "LinkedIn_URL",
              "value": "https://github.com/N1ghtHunter",
              "type": "text"
            },
            {
              "key": "GitHub_URL",
              "value": "https://www.linkedin.com/in/mazin-islam-88658b22b/",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/update_social_urls",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "update_social_urls"]
        }
      },
      "response": []
    },
    {
      "name": "Generate cv",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field has a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.equal(true)",
              "});",
              "",
              "pm.test(\"Response has a valid cvUrl field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.cvUrl).to.exist.and.to.be.a('string');",
              "});",
              "",
              "pm.test(\"cvUrl is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.cvUrl).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"cvUrl is a valid URL format\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.cvUrl).to.match(/^https?:\\/\\/[^\\s/$.?#].[^\\s]*$/);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/users/generate_cv?Job_Title=Full Stack Developer",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "generate_cv"],
          "query": [
            {
              "key": "Job_Title",
              "value": "Full Stack Developer"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update User Skill",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'success' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'message' field\", function () {",
              "    const responseData = pm.response.json();",
              "  ",
              "    pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The 'message' field is a string\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Rate",
              "value": "4",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/user_skills/1",
          "host": ["{{baseUrl}}api"],
          "path": ["user_skills", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Delete User Skill",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 204\", function () {\r",
              "    pm.response.to.have.status(204);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/user_skills/1",
          "host": ["{{baseUrl}}api"],
          "path": ["user_skills", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Profile Picture",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'success' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.have.property('success');",
              "});",
              "",
              "",
              "pm.test(\"The 'success' field is a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Response has 'message' field\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.have.property('message');",
              "});",
              "",
              "",
              "pm.test(\"The 'message' field is a string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_profile_picture",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_profile_picture"]
        }
      },
      "response": []
    },
    {
      "name": "Delete CV",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Success field is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_cv",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_cv"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Phone",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields - success and message\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist;",
              "    pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Success is a boolean value\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message is a non-empty string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_phone",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_phone"]
        }
      },
      "response": []
    },
    {
      "name": "Delete behance url",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "})",
              "",
              "pm.test('Response has the success field', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.exist;",
              "})",
              "",
              "pm.test('Success field is set to true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "pm.test('Response has the message field', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.message).to.exist;",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_behance_url",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_behance_url"]
        }
      },
      "response": []
    },
    {
      "name": "Delete GitHub",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "})",
              "",
              "pm.test('Validate success field is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData.success).to.be.true;",
              "})",
              "",
              "",
              "pm.test('Response does not contain any sensitive information', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "    pm.expect(responseData).to.not.have.property('password');",
              "    pm.expect(responseData).to.not.have.property('token');",
              "    pm.expect(responseData).to.not.have.property('creditCardNumber');",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_github_url",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_github_url"]
        }
      },
      "response": []
    },
    {
      "name": "Delete LinkedIn",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"The success field is a boolean value\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_linkedin_url",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_linkedin_url"]
        }
      },
      "response": []
    },
    {
      "name": "Delete About",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'success' field\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Response has the 'message' field\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The 'message' field is a string\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/delete_about",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "delete_about"]
        }
      },
      "response": []
    },
    {
      "name": "Reset Password",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field has a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"The message field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Message field is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Demo-Code",
            "value": "demo2023",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "email",
              "value": "mazinislam431@gmail.com",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/reset_password",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "reset_password"]
        }
      },
      "response": []
    },
    {
      "name": "Change password using token sent to email",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field has a boolean value\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"The message field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Message field is a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "password",
              "value": "Mazin123#",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/reset_password/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyX0lkIjoxLCJFbWFpbCI6Im1hemluaXNsYW00MzFAZ21haWwuY29tIiwiaWF0IjoxNjkzNTczMjg5LCJleHAiOjE2OTM1NzY4ODl9.7a8eptpqaWzFsQpthlSzl2rUI-bvbtjGfEc8iwiFFak",
          "host": ["{{baseUrl}}api"],
          "path": [
            "auth",
            "reset_password",
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyX0lkIjoxLCJFbWFpbCI6Im1hemluaXNsYW00MzFAZ21haWwuY29tIiwiaWF0IjoxNjkzNTczMjg5LCJleHAiOjE2OTM1NzY4ODl9.7a8eptpqaWzFsQpthlSzl2rUI-bvbtjGfEc8iwiFFak"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Logout",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Message field is a string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/auth/logout",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "logout"]
        }
      },
      "response": []
    },
    {
      "name": "Create admin",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 201\", function () {",
              "    pm.expect(pm.response.code).to.equal(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist;",
              "  pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field should be a boolean\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Message field is a non-empty string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "a840f219-987e-46e4-ba92-3026c9dcb5fe",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Admin",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Admin123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "admin@gmail.com",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "1234567891234567",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/admin/create",
          "host": ["{{baseUrl}}api"],
          "path": ["admin", "create"]
        }
      },
      "response": []
    },
    {
      "name": "Login ADMIN",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Your test name\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Admin",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Admin123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Generate Demo Code",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.property('success');",
              "    pm.expect(responseData).to.have.property('demoCode');",
              "});",
              "",
              "",
              "pm.test(\"Success is a boolean value\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Verify that demoCode is an object\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.demoCode).to.be.an('object');",
              "    pm.environment.set(\"demoCodeId\", responseData.demoCode.id);",
              "    pm.environment.set(\"demoCode\", responseData.demoCode.code);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "code",
              "value": "demo202333",
              "type": "text"
            },
            {
              "key": "expiresAt",
              "value": "2023-10-30 14:00:00",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}access-codes/",
          "host": ["{{baseUrl}}access-codes"],
          "path": [""]
        }
      },
      "response": []
    },
    {
      "name": "Get Demo Code by id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'success' field is present and its value is true\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.success).to.exist.and.to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'demoCode' object is present in the response\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.demoCode).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Validate the id field in the demoCode object is a non-zero integer\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.demoCode).to.exist.and.to.be.an('object');",
              "    pm.expect(responseData.demoCode.id).to.exist.and.to.be.a('number');",
              "    pm.expect(responseData.demoCode.id).to.be.above(0);",
              "});",
              "",
              "",
              "pm.test(\"Validate code field in demoCode object is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.demoCode).to.exist.and.to.be.an('object');",
              "    pm.expect(responseData.demoCode.code).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}access-codes/{{demoCodeId}}",
          "host": ["{{baseUrl}}access-codes"],
          "path": ["{{demoCodeId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Get Demo Codes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'success' field in the response\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"Verify that the 'demoCodes' array is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.demoCodes).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Validate id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.demoCodes).to.be.an('array');",
              "    ",
              "    responseData.demoCodes.forEach(function (demoCode) {",
              "        pm.expect(demoCode.id).to.be.a('number');",
              "        pm.expect(demoCode.id).to.be.at.least(0);",
              "    });",
              "});",
              "",
              "pm.test(\"Verify numUses is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.demoCodes).to.be.an('array');",
              "    responseData.demoCodes.forEach(function (demoCode) {",
              "        pm.expect(demoCode.numUses).to.be.a('number');",
              "        pm.expect(demoCode.numUses).to.be.at.least(0, \"numUses should be a non-negative integer\");",
              "    });",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}access-codes/",
          "host": ["{{baseUrl}}access-codes"],
          "path": [""]
        }
      },
      "response": []
    },
    {
      "name": "Verify Access code",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [""],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          },
          {
            "key": "Demo-Code",
            "value": "{{demoCode}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}access-codes/verify",
          "host": ["{{baseUrl}}access-codes"],
          "path": ["verify"]
        }
      },
      "response": []
    },
    {
      "name": "Update Demo Codes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Verify the 'success' field is present and has a value of true\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"The 'id' field in the demoCode object is a non-zero integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.demoCode).to.be.an('object');",
              "    pm.expect(responseData.demoCode.id).to.be.a('number').and.to.not.equal(0);",
              "});",
              "",
              "",
              "pm.test(\"The 'code' field in the demoCode object is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.demoCode).to.exist;",
              "    pm.expect(responseData.demoCode.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"valid\": true\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}access-codes/{{demoCodeId}}",
          "host": ["{{baseUrl}}access-codes"],
          "path": ["{{demoCodeId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Demo Code",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'success' field in the response\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"valid\": true\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}access-codes/{{demoCodeId}}",
          "host": ["{{baseUrl}}access-codes"],
          "path": ["{{demoCodeId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Update skill",
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "Skill_Name",
              "value": "Web Developmentt",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/skills/1",
          "host": ["{{baseUrl}}api"],
          "path": ["skills", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Skill",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Success field should be true\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "",
              "pm.test(\"Skill with ID 1 has been deleted from the database\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.success).to.be.true;",
              "    pm.expect(responseData.message).to.exist",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/skills/1",
          "host": ["{{baseUrl}}api"],
          "path": ["skills", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Job Category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"The response should be a string\", function () {",
              "    pm.expect(pm.response.text()).to.be.a('string');",
              "});",
              "",
              "",
              "pm.test(\"Verify that the response is 1\", function () {",
              "    pm.expect(pm.response.text()).to.equal(\"1\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": []
        },
        "url": {
          "raw": "{{baseUrl}}api/jobs/delete-job-category/1",
          "host": ["{{baseUrl}}api"],
          "path": ["jobs", "delete-job-category", "1"]
        }
      },
      "response": []
    },
    {
      "name": "Get Admin Profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('The success field is true', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.be.true;",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Admin",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Admin123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "admin@gmail.com",
              "type": "text"
            },
            {
              "key": "National_Id",
              "value": "1234567891234567",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/admin/get",
          "host": ["{{baseUrl}}api"],
          "path": ["admin", "get"]
        }
      },
      "response": []
    },
    {
      "name": "Prof Signup",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.test(\"Response has required fields - success and message\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist;",
              "    pm.expect(responseData.message).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"The success field is a boolean\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.a('boolean');",
              "});",
              "",
              "",
              "pm.test(\"The message field should be a string\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData).to.be.an('object');",
              "  pm.expect(responseData.message).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Proff",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Proff123##",
              "type": "text"
            },
            {
              "key": "Email",
              "value": "proff@gmail.com",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/users/professor_signup",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "professor_signup"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            },
            {
              "key": "user",
              "value": "dskfjksd",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Proff Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Professor logged in successfully\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.sessionId).to.not.equal(undefined)\r",
              "    pm.expect(jsonData.success).to.equal(true)\r",
              "    pm.expect(jsonData.actor).to.equal(\"Professor\")\r",
              "pm.collectionVariables.set(\"sessionId\", jsonData.sessionId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "UserName",
              "value": "Proff",
              "type": "text"
            },
            {
              "key": "Password",
              "value": "Proff123##",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}api/auth/login",
          "host": ["{{baseUrl}}api"],
          "path": ["auth", "login"],
          "query": [
            {
              "key": "limit",
              "value": "5",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Proff",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "",
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"The 'success' field should be true\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.success).to.be.true;",
              "});",
              "",
              "",
              "pm.test(\"Validate the 'professor' object is present in the response\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.professor).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"User_Id is a non-negative integer\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.professor.User_Id).to.exist.and.to.be.a('number');",
              "    pm.expect(responseData.professor.User_Id).to.be.at.least(0);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}api/users/get_professor",
          "host": ["{{baseUrl}}api"],
          "path": ["users", "get_professor"]
        }
      },
      "response": []
    },
    {
      "name": "Clear db",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test('Validate the success field in the response', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.success).to.exist.and.to.be.a('boolean');",
              "})",
              "",
              "pm.test('Validate the message field in the response', function () {",
              "    const responseData = pm.response.json();",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "})",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Admin-Api-Key",
            "value": "{{admin-api-key}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}api/admin/clear_tables",
          "host": ["{{baseUrl}}api"],
          "path": ["admin", "clear_tables"]
        }
      },
      "response": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{sessionId}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "pm.request.headers.add({",
          "  key: \"Demo-Code\",",
          "  value: \"demo2023\"",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "sessionId",
      "value": ""
    },
    {
      "key": "baseUrl",
      "value": "",
      "type": "string"
    },
    {
      "key": "public",
      "value": "http://localhost:3008/",
      "type": "string"
    },
    {
      "key": "demoCodeId",
      "value": ""
    },
    {
      "key": "demoCode",
      "value": ""
    }
  ]
}
